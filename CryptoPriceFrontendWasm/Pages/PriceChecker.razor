@page "/price-checker"
@using System.Net.Http.Json
@inject HttpClient Http

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-md-7 col-lg-6">
            <div class="card shadow-lg border-0">
                <div class="card-body">
                    <h2 class="card-title text-center mb-4">Consulta de Precios</h2>
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">Moneda base</label>
                            <select class="form-select" @onchange="OnBaseChanged" value="@baseSymbol">
                                @foreach (var symbol in symbols)
                                {
                                    <option value="@symbol">@symbol.ToUpper()</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Moneda destino</label>
                            <select class="form-select" @onchange="OnTargetChanged" value="@targetSymbol">
                                @foreach (var symbol in GetTargetSymbols())
                                {
                                    <option value="@symbol">@symbol.ToUpper()</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="col-12 text-center mt-4">
                        @if (isLoading)
                        {
                            <span class="spinner-border"></span>
                        }
                    </div>
                    @if (errorMsg != null)
                    {
                        <div class="alert alert-danger mt-4" role="alert">
                            @errorMsg
                        </div>
                    }
                    @if (priceResult != null && errorMsg == null)
                    {
                        <div class="alert alert-success mt-4 text-center" role="alert">
                            <b>1 @baseSymbol.ToUpper()</b> = <span class="fs-4">@priceResult.price</span> <b>@targetSymbol.ToUpper()</b>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string baseSymbol = "btc";
    private string targetSymbol = "usd";
    private PriceResult? priceResult;
    private string? errorMsg;
    private bool isLoading = false;
    private readonly string[] symbols = new[] { "btc", "eth", "usd", "eur", "ars", "brl" };

    protected override async Task OnInitializedAsync()
    {
        await FetchPriceAsync();
    }

    private IEnumerable<string> GetTargetSymbols()
    {
        if (baseSymbol == "btc" || baseSymbol == "eth")
            return new[] { "usd" };
        return symbols.Where(s => s != baseSymbol && s != "btc" && s != "eth");
    }

    private async Task OnBaseChanged(ChangeEventArgs e)
    {
        var newBase = e.Value?.ToString() ?? baseSymbol;
        if (newBase == targetSymbol)
        {
            errorMsg = "La moneda base y destino no pueden ser iguales.";
            priceResult = null;
            baseSymbol = newBase;
            StateHasChanged();
            return;
        }
        baseSymbol = newBase;
        // Si la moneda destino ya no es válida, la resetea
        if (!GetTargetSymbols().Contains(targetSymbol))
            targetSymbol = GetTargetSymbols().First();
        await FetchPriceAsync();
    }

    private async Task OnTargetChanged(ChangeEventArgs e)
    {
        var newTarget = e.Value?.ToString() ?? targetSymbol;
        if (baseSymbol == newTarget)
        {
            errorMsg = "La moneda base y destino no pueden ser iguales.";
            priceResult = null;
            targetSymbol = newTarget;
            StateHasChanged();
            return;
        }
        targetSymbol = newTarget;
        await FetchPriceAsync();
    }

    private async Task FetchPriceAsync()
    {
        errorMsg = null;
        priceResult = null;
        isLoading = true;
        StateHasChanged();
        try
        {
            var url = $"http://localhost:5166/api/prices/{baseSymbol}/{targetSymbol}";
            priceResult = await Http.GetFromJsonAsync<PriceResult>(url);

            if (priceResult == null || priceResult.price == 0.0m)
            {
                errorMsg = "No se pudo obtener el precio para ese par de monedas.";
            }
        }
        catch
        {
            errorMsg = "Error al consultar el precio. Verifica la conexión con el backend.";
        }
        isLoading = false;
        StateHasChanged();
    }

    public class PriceResult
    {
        public string baseSymbol { get; set; }
        public string targetSymbol { get; set; }
        public decimal price { get; set; }
    }
}