@page "/price-checker"
@using System.Net.Http.Json

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-md-7 col-lg-6">
            <div class="card shadow-lg border-0">
                <div class="card-body">
                    <h2 class="card-title text-center mb-4">Consulta de Precios</h2>
                    <form class="row g-3" @onsubmit="OnSubmit">
                        <div class="col-md-6">
                            <label class="form-label">Moneda base</label>
                            <select class="form-select" @bind="baseSymbol">
                                @foreach (var symbol in symbols)
                                {
                                    <option value="@symbol">@symbol.ToUpper()</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Moneda destino</label>
                            <select class="form-select" @bind="targetSymbol">
                                @foreach (var symbol in GetTargetSymbols())
                                {
                                    <option value="@symbol">@symbol.ToUpper()</option>
                                }
                            </select>
                        </div>
                        <div class="col-12 text-center">
                            <button type="submit" class="btn btn-primary px-4" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm"></span>
                                }
                                else
                                {
                                    <span>Consultar</span>
                                }
                            </button>
                        </div>
                    </form>
                    @if (errorMsg != null)
                    {
                        <div class="alert alert-danger mt-4" role="alert">
                            @errorMsg
                        </div>
                    }
                    @if (priceResult != null && errorMsg == null)
                    {
                        <div class="alert alert-success mt-4 text-center" role="alert">
                            <b>1 @baseSymbol.ToUpper()</b> = <span class="fs-4">@priceResult.price</span> <b>@targetSymbol.ToUpper()</b>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string _baseSymbol = "btc";
    private string baseSymbol
    {
        get => _baseSymbol;
        set
        {
            if (_baseSymbol != value)
            {
                _baseSymbol = value;
                // Si la moneda destino no es v치lida para la base, la resetea a la primera opci칩n v치lida
                if (!GetTargetSymbols().Contains(targetSymbol))
                    targetSymbol = GetTargetSymbols().First();
            }
        }
    }
    private string targetSymbol = "usd";
    private PriceResult? priceResult;
    private string? errorMsg;
    private bool isLoading = false;
    private readonly string[] symbols = new[] { "btc", "eth", "usd", "eur", "ars", "brl" };



    private IEnumerable<string> GetTargetSymbols()
    {
        if (baseSymbol == "btc" || baseSymbol == "eth")
            return new[] { "usd" };
        // Si es fiat, puede comparar con cualquier otra fiat menos la misma y menos cripto
        return symbols.Where(s => s != baseSymbol && s != "btc" && s != "eth");
    }

    private async Task OnSubmit()
    {
        errorMsg = null;
        priceResult = null;
        isLoading = true;
        try
        {
            var url = $"http://localhost:5166/api/prices/{baseSymbol}/{targetSymbol}";
            priceResult = await Http.GetFromJsonAsync<PriceResult>(url);

            if (priceResult == null || priceResult.price == 0.0m)
            {
                errorMsg = "No se pudo obtener el precio para ese par de monedas.";
            }
        }
        catch
        {
            errorMsg = "Error al consultar el precio. Verifica la conexi칩n con el backend.";
        }
        isLoading = false;
    }

    [Inject]
    public HttpClient Http { get; set; } = default!;

    public class PriceResult
    {
        public string baseSymbol { get; set; }
        public string targetSymbol { get; set; }
        public decimal price { get; set; }
    }
}